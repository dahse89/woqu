// Generated by CoffeeScript 1.4.0
(function() {
  var Db;

  Db = (function() {
    var Task, conn, name, ready, sqlite3;
    sqlite3 = require('sqlite3').verbose();
    Task = require('./model/Task.js');
    name = "woqu.db";
    conn = null;
    ready = null;
    return {
      /**
      * create connection and init db class
      * @param cb function
      */

      init: function(cb) {
        ready = cb;
        return conn = new sqlite3.Database(name, Db.createTables);
      },
      /**
      * create needed tables
      * @param err sqlite_error
      */

      createTables: function(err) {
        if (err) {
          console.error(err);
        }
        return Db.createTaskTable();
      },
      /**
      * create Task table
      */

      createTaskTable: function() {
        return conn.run("      CREATE TABLE IF NOT EXISTS tasks(        id INTEGER PRIMARY KEY,        description TEXT,        created_at INTEGER,        postponed INTEGER,        done_at NUMBER      )    ", function(err) {
          if (err) {
            console.error(err);
          }
          return ready(Db);
        });
      },
      /**
      * get a single Task by id
      * @param id string
      * @paran cb function
      */

      getTaskById: function(id, cb) {
        return conn.each("      SELECT        id,        description,        created_at,        postponed,        done_at      FROM tasks      WHERE id = '" + id + "'      LIMIT 1", function(err, row) {
          var task;
          if (err) {
            console.error(err);
          }
          task = new Task();
          task.init(row);
          return cb(task);
        });
      },
      /**
      * get current Task that people have do
      * @param cb function
      */

      getCurrentTask: function(cb) {
        return conn.each("      SELECT        id,        description,        created_at,        postponed,        done_at      FROM tasks      WHERE done_at IS NULL      ORDER by (id+postponed),postponed,id ASC      LIMIT 1", function(err, row) {
          var task;
          if (err) {
            console.error(err);
          }
          task = new Task();
          task.init(row);
          return cb(task);
        });
      },
      /**
      * update a Task in sqlite db
      * @param task Task
      * @param cb function
      */

      updateTask: function(task, cb) {
        var stmt;
        stmt = conn.prepare("      UPDATE tasks SET        description = $description,        created_at = $created_at,        postponed = $postponed,        done_at  = $done_at      WHERE id = $id    ");
        return stmt.run(task.to$Obj(), cb);
      },
      /**
      * insert a new task to sqlite db
      * @param task Task
      */

      insertTask: function(task, cb) {
        var stmt;
        stmt = conn.prepare("      INSERT INTO tasks (        id,        description,        created_at,        postponed,        done_at      ) VALUES (        $id,        $description,        $created_at,        $postponed,        $done_at      )    ");
        return stmt.run(task.to$Obj(), cb);
      }
    };
  })();

  module.exports = Db;

}).call(this);
