// Generated by CoffeeScript 1.4.0
(function() {
  var Db, Task, sqlite3;

  sqlite3 = require('sqlite3').verbose();

  Task = require('./model/Task.js');

  Db = {
    name: "woqu.db",
    conn: null,
    ready: null,
    init: function(cb) {
      Db.ready = cb;
      return Db.conn = new sqlite3.Database(Db.name, Db.createTables);
    },
    createTables: function(err) {
      if (err) {
        console.error(err);
      }
      return Db.conn.run("      CREATE TABLE IF NOT EXISTS tasks(        id INTEGER PRIMARY KEY,        description TEXT,        created_at INTEGER,        postponed INTEGER,        done_at NUMBER      )    ", function(err) {
        if (err) {
          console.error(err);
        }
        return Db.ready(Db);
      });
    },
    getTaskById: function(id, cb) {
      return Db.conn.each("      SELECT        id,        description,        created_at,        postponed,        done_at      FROM tasks      WHERE id = '" + id + "'      LIMIT 1", function(err, row) {
        var task;
        if (err) {
          console.error(err);
        }
        task = new Task();
        task.init(row);
        return cb(task);
      });
    },
    getCurrentTask: function(cb) {
      return Db.conn.each("      SELECT        id,        description,        created_at,        postponed,        done_at      FROM tasks      WHERE done_at IS NULL      ORDER by (id+postponed),postponed,id ASC      LIMIT 1", function(err, row) {
        var task;
        if (err) {
          console.error(err);
        }
        task = new Task();
        task.init(row);
        return cb(task);
      });
    },
    updateTask: function(task, cb) {
      var stmt;
      stmt = Db.conn.prepare("      UPDATE tasks SET        description = $description,        created_at = $created_at,        postponed = $postponed,        done_at  = $done_at      WHERE id = $id    ");
      return stmt.run(task.to$Obj(), cb);
    },
    insertTask: function(task, cb) {
      var stmt;
      stmt = Db.conn.prepare("      INSERT INTO tasks (        id,        description,        created_at,        postponed,        done_at      ) VALUES (        $id,        $description,        $created_at,        $postponed,        $done_at      )    ");
      return stmt.run(task.to$Obj(), cb);
    }
  };

  module.exports = Db;

}).call(this);
