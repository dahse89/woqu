// Generated by CoffeeScript 1.9.1

/**
  * This is the data model for a task
  * The object looks a little bit different in the db
  * Only the values defines in task schema are stored (core/Db)
  * The model in initialized from orm object using fromOrm() method
 */

(function() {
  var Task, clc, moment,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  moment = require('moment');

  clc = require('cli-color');


  /**
   * Task
   * data model representing a task that have to be done
   */

  module.exports = Task = (function(superClass) {
    extend(Task, superClass);


    /**
     * class constructor
     * initialize private properies
     */

    function Task(ormDataModel) {
      if (ormDataModel == null) {
        ormDataModel = null;
      }
      Task.__super__.constructor.call(this, ormDataModel);
      this.description = null;
      this.postponed = null;
      this.done_at = null;
      if (ormDataModel !== null) {
        this.fromOrm(ormDataModel);
      }
    }

    Task.prototype.fromOrm = function(ormModel) {
      var dataValues;
      dataValues = ormModel.dataValues;
      this._fromOrm(ormModel);
      this.setDescription(dataValues.description);
      this.setPostponed(dataValues.postponed);
      return this.setDoneAt(dataValues.done_at);
    };


    /**
     * Getter/ Setter
     */

    Task.prototype.getDescription = function() {
      return this.description;
    };

    Task.prototype.setDescription = function(description) {
      this.description = description;
      return this;
    };

    Task.prototype.getPostponed = function() {
      return this.postponed;
    };

    Task.prototype.setPostponed = function(postponed) {
      this.postponed = postponed;
      return this;
    };

    Task.prototype.getDoneAt = function() {
      return this.done_at;
    };

    Task.prototype.setDoneAt = function(done_at) {
      this.done_at = done_at;
      return this;
    };

    Task.prototype.increasePostponed = function() {
      return this.postponed++;
    };


    /**
     * converts an instance of this class to an object
     * the properties will be the same then in there but
     * they will all start with $ to use them in sqlite binding
     */

    Task.prototype.to$Obj = function() {
      var arr, key, val;
      arr = {};
      for (key in this) {
        val = this[key];
        if (typeof val !== 'function') {
          arr['$' + key] = val instanceof Date ? val.getTime() : val;
        }
      }
      return arr;
    };


    /**
     * convert an instance of this class to string
     * @return string
     */

    Task.prototype.toString = function() {
      var create_date_label, done_at_label, hardBclose, hardBopen, id, task_lable;
      create_date_label = moment(this.created_at).format('DD.MM.YYYY HH:mm:ss');
      task_lable = clc.white('Task: #');
      hardBopen = clc.red('[');
      hardBclose = clc.red(']');
      id = clc.blue(this.id);
      done_at_label = this.done_at ? (hardBopen + "done" + hardBclose + ": ") + moment(this.done_at).format('DD.MM.YYYY HH:mm:ss') : ' ';
      return "" + task_lable + id + " From: " + create_date_label + "\n" + this.description + "\n" + hardBopen + "postponed" + hardBclose + ": " + this.postponed + "\n" + done_at_label;
    };

    return Task;

  })(require('./SuperModel'));

}).call(this);
