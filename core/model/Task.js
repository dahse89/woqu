// Generated by CoffeeScript 1.4.0

/**
  * This is the data model for a task
  * The object looks a litte bit differnt in the db
  * Only the values defines in task schema are stored (core/Db)
  * The model in initialized from orm object using fromOrm() method
*/


(function() {
  var Task, clc, moment;

  moment = require('moment');

  clc = require('cli-color');

  /**
  * Task
  * data model representing a task that have to be done
  */


  Task = (function() {
    /**
    * class constructor
    * initialize private properies
    */

    function Task(ormDataModel) {
      if (ormDataModel == null) {
        ormDataModel = null;
      }
      this.id = null;
      this.description = null;
      this.created_at = null;
      this.postponed = null;
      this.done_at = null;
      this.created_at = null;
      this.updated_at = null;
      if (ormDataModel !== null) {
        this.fromOrm(ormDataModel);
      }
    }

    Task.prototype.fromOrm = function(ormModel) {
      var dataValues;
      dataValues = ormModel.dataValues;
      this.setId(dataValues.id);
      this.setDescription(dataValues.description);
      this.setPostponed(dataValues.postponed);
      this.setDoneAt(dataValues.done_at);
      this.setCreateAt(dataValues.createdAt);
      return this.setUpdateAt(dataValues.updatedAt);
    };

    Task.prototype.setCreateAt = function(created_at) {
      this.created_at = created_at;
      return this;
    };

    Task.prototype.getCreateAt = function() {
      return this.created_at;
    };

    Task.prototype.setUpdateAt = function(updated_at) {
      this.updated_at = updated_at;
      return this;
    };

    Task.prototype.getUpdateAt = function() {
      return this.updated_at;
    };

    /**
    * id getter
    * @return int
    */


    Task.prototype.getId = function() {
      return this.id;
    };

    /**
    * id setter
    * @param id int
    */


    Task.prototype.setId = function(id) {
      this.id = id;
      return this;
    };

    /**
    * description getter
    * @return string
    */


    Task.prototype.getDescription = function() {
      return this.description;
    };

    /**
    * id setter
    * @param id int
    */


    Task.prototype.setDescription = function(desc) {
      this.description = desc;
      return this;
    };

    /**
    * reated_at getter
    * @return Date
    */


    Task.prototype.getCreatedAt = function() {
      return this.created_at;
    };

    /**
    * id setter
    * @param date Date
    */


    Task.prototype.setCreatedAt = function(date) {
      this.created_at = date;
      return this;
    };

    /**
    * postponed getter
    * @return int
    */


    Task.prototype.getPostponed = function() {
      return this.postponed;
    };

    /**
    * increase postponed property
    */


    Task.prototype.increasePostponed = function() {
      return this.postponed++;
    };

    /**
    * postponed setter
    * @param postponed int
    */


    Task.prototype.setPostponed = function(number) {
      this.postponed = number;
      return this;
    };

    /**
    * done_at getter
    * @return Date
    */


    Task.prototype.getDoneAt = function() {
      return this.done_at;
    };

    /**
    * done_at setter
    * @param done_at Date
    */


    Task.prototype.setDoneAt = function(date) {
      this.done_at = date;
      return this;
    };

    /**
    * initialize an instance of this class by an object
    * @param obj Object
    */


    Task.prototype.init = function(obj) {
      var key, val;
      for (key in obj) {
        val = obj[key];
        this[key] = val;
      }
      return this;
    };

    /**
    * converts an instance of this class to an object
    * the properties will be the same then in there but
    * they will all start with $ to use them in sqlite binding
    */


    Task.prototype.to$Obj = function() {
      var arr, key, val;
      arr = {};
      for (key in this) {
        val = this[key];
        if (typeof val !== 'function') {
          arr['$' + key] = val instanceof Date ? val.getTime() : val;
        }
      }
      return arr;
    };

    /**
    * convert an instance of this class to string
    * @return string
    */


    Task.prototype.toString = function() {
      var create_date_label, done_at_label, hardBclose, hardBopen, id, task_lable;
      create_date_label = moment(this.created_at).format('DD.MM.YYYY HH:mm:ss');
      task_lable = clc.white('Task: #');
      hardBopen = clc.red('[');
      hardBclose = clc.red(']');
      id = clc.blue(this.id);
      done_at_label = this.done_at ? ("" + hardBopen + "done" + hardBclose + ": ") + moment(this.done_at).format('DD.MM.YYYY HH:mm:ss') : ' ';
      return "" + task_lable + id + " From: " + create_date_label + "\n" + this.description + "\n" + hardBopen + "postponed" + hardBclose + ": " + this.postponed + "\n" + done_at_label;
    };

    return Task;

  })();

  module.exports = Task;

}).call(this);
