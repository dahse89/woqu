// Generated by CoffeeScript 1.9.1
(function() {
  var IO;

  IO = (function() {
    function IO(master) {
      this.master = master;
      this.readline = require('readline');
      this.term_ui = require('./term-ui/TermUI.js');
      this.moment = require('moment');
      this.clc = require('cli-color');
      this.rl = this.readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
    }

    IO.prototype.printTaskOrmModel = function(model) {
      var Task, task;
      Task = this.master.getTask();
      task = new Task(model);
      return this.println(task.toString());
    };

    IO.prototype.error = function(msg) {
      this.println(msg);
      return process.exit();
    };

    IO.prototype.getString = function(data) {
      if (typeof data === 'object') {
        return JSON.stringify(data, null, 4);
      }
      return data;
    };


    /**
    * print string in shell
    *
     */

    IO.prototype.print = function(str) {
      return this.term_ui.out(this.getString(str));
    };


    /**
    * print string in shell with newline
    *
     */

    IO.prototype.println = function(str) {
      return this.print(this.getString(str) + "\n");
    };


    /**
    * this provides an read line input for the shell
     */

    IO.prototype.readLine = function(question, cb) {
      var self;
      self = this;
      return this.rl.question(question, function(answer) {
        cb(answer, self);
        return self.rl.close();
      });
    };

    IO.prototype.__date = function(date, format) {
      if (format == null) {
        format = 'DD.MM.YYYY HH:mm:ss';
      }
      return this.moment(date).format(format);
    };

    IO.prototype.printTaskWithWork = function(task, works) {};


    /**
     * convert an instance of task class to string
     * @return string
     */

    IO.prototype.printTask = function(task, cb) {
      var $_, _$, __moment, create_date_label, done_at_label, id, ref, task_lable, workLog;
      create_date_label = this.__date(task.createdAt);
      task_lable = this.clc.white('Task: #');
      ref = [this.clc.red('['), this.clc.red(']')], _$ = ref[0], $_ = ref[1];
      id = this.clc.blue(task.id);
      done_at_label = task.done_at ? (_$ + "done" + $_ + ": ") + this.__date(task.done_at) : ' ';
      workLog = '';
      __moment = this.moment;
      return task.getLoggedWorks().then(function(work) {
        var i, len, w;
        for (i = 0, len = work.length; i < len; i++) {
          w = work[i];
          workLog += "   " + (__moment(w.createdAt).format("DD.MM.YYYY HH:mm:ss")) + ": " + w.text + "\n";
        }
        console.log("" + task_lable + id + " From: " + create_date_label + "\n" + task.description + "\n" + _$ + "postponed" + $_ + ": " + task.postponed + "\n" + done_at_label + "\n" + workLog);
        return cb();
      });
    };

    return IO;

  })();

  module.exports = IO;

}).call(this);
