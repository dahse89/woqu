// Generated by CoffeeScript 1.9.1
(function() {
  var IO;

  IO = (function() {
    function IO(master) {
      this.master = master;
      this.readline = require('readline');
      this.term_ui = require('./term-ui/TermUI.js');
      this.moment = require('moment');
      this.clc = require('cli-color');
      this.rl = this.readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
    }

    IO.prototype.printTaskOrmModel = function(model) {
      var Task, task;
      Task = this.master.getTask();
      task = new Task(model);
      return this.println(task.toString());
    };

    IO.prototype.error = function(msg) {
      this.println(msg);
      return process.exit();
    };

    IO.prototype.getString = function(data) {
      if (typeof data === 'object') {
        return JSON.stringify(data, null, 4);
      }
      return data;
    };


    /**
    * print string in shell
    *
     */

    IO.prototype.print = function(str) {
      return this.term_ui.out(this.getString(str));
    };


    /**
    * print string in shell with newline
    *
     */

    IO.prototype.println = function(str) {
      return this.print(this.getString(str) + "\n");
    };


    /**
    * this provides an read line input for the shell
     */

    IO.prototype.readLine = function(question, cb) {
      var self;
      self = this;
      return this.rl.question(question, function(answer) {
        cb(answer, self);
        return self.rl.close();
      });
    };

    IO.prototype.__date = function(date, format) {
      if (format == null) {
        format = 'DD.MM.YYYY HH:mm:ss';
      }
      return this.moment(date).calendar();
    };

    IO.prototype.gotLoggedWork = function(work) {};


    /**
     * convert an instance of task class to string
     * @return string
     */

    IO.prototype.printTask = function(task, cb) {
      var Info, LoggedWork, Task, ref;
      ref = this.master.factory('model/Task', 'model/LoggedWork', 'model/Info'), Task = ref[0], LoggedWork = ref[1], Info = ref[2];
      return Task.findAll({
        where: {
          id: task.id
        },
        include: [Info, LoggedWork]
      }).then((function(_this) {
        return function(fulltask) {
          var $_, _$, create_date_label, done_at_label, i, id, info, j, k, len, len1, ref1, ref2, ref3, task_lable, w, workLog;
          create_date_label = _this.__date(task.createdAt);
          task_lable = _this.clc.white('Task: #');
          ref1 = [_this.clc.red('['), _this.clc.red(']')], _$ = ref1[0], $_ = ref1[1];
          id = _this.clc.blue(task.id);
          done_at_label = task.done_at ? (_$ + "done" + $_ + ": ") + _this.__date(task.done_at) : ' ';
          info = '';
          ref2 = fulltask[0].Infos;
          for (j = 0, len = ref2.length; j < len; j++) {
            i = ref2[j];
            info += " * " + (_this.__date(i.createdAt)) + ": " + i.text + "\n";
          }
          workLog = '';
          ref3 = fulltask[0].LoggedWorks;
          for (k = 0, len1 = ref3.length; k < len1; k++) {
            w = ref3[k];
            workLog += "   " + (_this.__date(w.createdAt)) + ": " + w.text + "\n";
          }
          _this.println("" + task_lable + id + " added: " + create_date_label + "\n" + task.description + "\n" + info + "\n" + _$ + "postponed" + $_ + ": " + task.postponed + "\n" + done_at_label + "\n" + workLog);
          return cb();
        };
      })(this));
    };

    return IO;

  })();

  module.exports = IO;

}).call(this);
