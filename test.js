// Generated by CoffeeScript 1.4.0
(function() {
  var CmdInterface, Multiton, Test, t, x,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  CmdInterface = (function() {

    function CmdInterface() {}

    CmdInterface.prototype.init = function() {
      return console.log("super");
    };

    return CmdInterface;

  })();

  Test = (function(_super) {

    __extends(Test, _super);

    function Test() {
      this.val = null;
    }

    Test.prototype.init = function() {
      Test.__super__.init.apply(this, arguments);
      return console.log("bla");
    };

    Test.prototype.test = function(v) {
      Test.__super__.test.apply(this, arguments);
      return this.val = v;
    };

    Test.prototype.getVal = function() {
      return this.val;
    };

    return Test;

  })(CmdInterface);

  Multiton = (function() {

    function Multiton() {}

    Multiton.singletions = {
      Test: Test
    };

    Multiton.instances = {};

    Multiton.get = function() {
      var args, name, _base;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_base = this.instances)[name] || (_base[name] = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this.singletions[name], args, function(){}));
    };

    Multiton.x = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return x[y] || (x[y] = y.apply(null, args));
    };

    return Multiton;

  })();

  t = Multiton.get('Test');

  t.init();

  t.test("lol");

  console.log(t.getVal());

  x = Multiton.get('Test');

  console.log(x.getVal());

  console.log(t === x);

}).call(this);
